- Server、Clientの通信暗号化
	1. https化
	2. 自前で暗号化
		公開鍵生成→共通鍵送信
		javaはbouncy castle、goはcrypto/rsa、crypt/aesで暗号扱える
		rsaの2048bit、aesの256bit使う
		rsa公開鍵はder形式、aes共通鍵は(初期ベクトル長)(初期ベクトルbase64)(鍵長)(鍵base64)で送信
- 接続方法案
	サーバーは秘密鍵を固定
	クライアント		サーバー

	UDP 乱数、(乱数、パスワード、IP)ハッシュ	→ 
			← UDP 公開鍵、(ハッシュ、パスワード、公開鍵、IP)ハッシュ
	HTTP (共通鍵、(IP、パスワード、共通鍵)ハッシュ)暗号化 →
			← HTTP_OK


	
- 同期機能の自動起動
	- foreground serviceに変更する案(syncthingはこれ)
	
- 通信データの圧縮
	- gzipがgoでもjavaでも使える
	- httpはbase64じゃなくても送れるらしい
- 読み込みの並列化
- UIの改善
- 指定Wifiでのみ送信する設定
- 競合との差別化
- Wifi接続時のみ動作



- 前回からの差分
	- 接続の暗号化
		- 共通鍵交換用のRSA暗号、データ暗号化用のARS暗号
		- サーバー起動毎にRSA暗号を発行する(本当はファイルに保存しておくべきだが、そのセキュリティを担保できないため)
	- 接続プロセス変更
		- IPアドレスと鍵をハッシュ対象に変更
		- IPアドレスをハッシュ化に追加することで、正規のサーバー・クライアントのデータを使ってIPアドレスのみを差し替えた攻撃に対策
		- 乱数を時間依存からセキュリティに配慮したSecureRandomに変更
			- 乱数を事前に予測しにくく
			
		